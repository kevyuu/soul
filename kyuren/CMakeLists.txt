add_subdirectory(blenkyu)

set(PYKYUREN_SOURCES
	"pykyuren.cpp"
    "render_jobs/lighting_render_job.cpp"
    "render_jobs/shadow_map_render_job.cpp"
    "render_jobs/scene_render_job.cpp"
    "render_pipeline.cpp"
)

set(BLENDER_LIBS "")

add_library(pykyuren STATIC ${PYKYUREN_SOURCES})
target_link_libraries(pykyuren
	PRIVATE soul glfw ${GLFW_LIBRARIES} ${PYTHON_LIBRARIES} tracy ${BLENDER_LIBS} blenkyu)
target_include_directories(pykyuren 
    PUBLIC ${PYTHON_INCLUDE_DIRS})

function(bundle_static_library tgt_name bundled_tgt_name additional_lib)
  list(APPEND static_libs ${tgt_name})

  function(_recursively_collect_dependencies input_target)
    set(_input_link_libraries LINK_LIBRARIES)
    get_target_property(_input_type ${input_target} TYPE)
    if (${_input_type} STREQUAL "INTERFACE_LIBRARY")
      set(_input_link_libraries INTERFACE_LINK_LIBRARIES)
    endif()
    get_target_property(public_dependencies ${input_target} ${_input_link_libraries})
    foreach(dependency IN LISTS public_dependencies)
      if(TARGET ${dependency})
        get_target_property(alias ${dependency} ALIASED_TARGET)
        if (TARGET ${alias})
          set(dependency ${alias})
        endif()
        get_target_property(_type ${dependency} TYPE)
        if (${_type} STREQUAL "STATIC_LIBRARY")
          list(APPEND static_libs ${dependency})
        endif()

        get_property(library_already_added
          GLOBAL PROPERTY _${tgt_name}_static_bundle_${dependency})
        if (NOT library_already_added)
          set_property(GLOBAL PROPERTY _${tgt_name}_static_bundle_${dependency} ON)
          _recursively_collect_dependencies(${dependency})
        endif()
      endif()
    endforeach()
    set(static_libs ${static_libs} PARENT_SCOPE)
  endfunction()

  _recursively_collect_dependencies(${tgt_name})

  message(STATUS "Target name : " ${tgt_name})
 
  list(REMOVE_DUPLICATES static_libs)
  message(STATUS "Static lib : " ${static_libs})
  set(bundled_tgt_full_name 
    ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}${bundled_tgt_name}${CMAKE_STATIC_LIBRARY_SUFFIX})

  if (CMAKE_CXX_COMPILER_ID MATCHES "^(Clang|GNU)$")
    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${bundled_tgt_name}.ar.in
      "CREATE ${bundled_tgt_full_name}\n" )
        
    foreach(tgt IN LISTS static_libs)
      file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/${bundled_tgt_name}.ar.in
        "ADDLIB $<TARGET_FILE:${tgt}>\n")
    endforeach()
    
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/${bundled_tgt_name}.ar.in "SAVE\n")
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/${bundled_tgt_name}.ar.in "END\n")

    file(GENERATE
      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${bundled_tgt_name}.ar
      INPUT ${CMAKE_CURRENT_BINARY_DIR}/${bundled_tgt_name}.ar.in)

    set(ar_tool ${CMAKE_AR})
    if (CMAKE_INTERPROCEDURAL_OPTIMIZATION)
      set(ar_tool ${CMAKE_CXX_COMPILER_AR})
    endif()

    add_custom_command(
      COMMAND ${ar_tool} -M < ${CMAKE_CURRENT_BINARY_DIR}/${bundled_tgt_name}.ar
      OUTPUT ${bundled_tgt_full_name}
      COMMENT "Bundling ${bundled_tgt_name}"
      VERBATIM)
  elseif(MSVC)
    find_program(lib_tool lib)

    foreach(tgt IN LISTS static_libs)
      list(APPEND static_libs_full_names $<TARGET_FILE:${tgt}>)
    endforeach()

    foreach(dependency IN LISTS additional_lib)
        message(STATUS "Dependency : " ${dependency})
        list(APPEND static_libs_full_names ${dependency})
    endforeach()

    message(STATUS "Static libs full names : " ${static_libs_full_names})
    
    
    add_custom_command(
      COMMAND ${lib_tool} /NOLOGO /OUT:${bundled_tgt_full_name} ${static_libs_full_names}
      OUTPUT ${bundled_tgt_full_name}
      COMMENT "Bundling ${bundled_tgt_name}"
      DEPENDS ${static_libs}
      VERBATIM)
  else()
    message(FATAL_ERROR "Unknown bundle scenario!")
  endif()

  add_custom_target(bundling_target ALL DEPENDS ${bundled_tgt_full_name} ${tgt_name})

  add_library(${bundled_tgt_name} STATIC IMPORTED)
  set_target_properties(${bundled_tgt_name} 
    PROPERTIES 
      IMPORTED_LOCATION ${bundled_tgt_full_name}
      INTERFACE_INCLUDE_DIRECTORIES $<TARGET_PROPERTY:${tgt_name},INTERFACE_INCLUDE_DIRECTORIES>)
  add_dependencies(${bundled_tgt_name} bundling_target)

endfunction()

bundle_static_library(pykyuren pykyuren_bundled "${BLENDER_LIBS}")

set(PYKYUREN_PYTHON_SOURCES
    "addon/__init__.py"
)

set(PYKYUREN_SETUP_PY_IN "${CMAKE_CURRENT_SOURCE_DIR}/setup.py.in")
set(PYKYUREN_SETUP_PY "${CMAKE_CURRENT_BINARY_DIR}/setup.py")
set(PYKYUREN_TIMESTAMP "${CMAKE_CURRENT_BINARY_DIR}/build/timestamp")
set(PYKYUREN_DEPS pykyuren pykyuren_bundled ${PYKYUREN_SOURCES} ${PYKYUREN_PYTHON_SOURCES} ${PYKYUREN_SETUP_PY} "pykyuren_binding.cpp")

configure_file(${PYKYUREN_SETUP_PY_IN} ${PYKYUREN_SETUP_PY})

set(BLENDER_USER_SCRIPT_DIR "" CACHE FILEPATH "Blender user script directory")
set(BLENDER_USER_SCRIPT_KYUREN_DIR ${BLENDER_USER_SCRIPT_DIR}/startup/kyuren/)
set(PYKYUREN_LIB ${CMAKE_CURRENT_BINARY_DIR}/pykyuren.cp37-win_amd64.pyd)

message(STATUS "Blender User Script : " ${BLENDER_USER_SCRIPT_DIR})
find_program(PYTHON "python")

add_custom_command(OUTPUT ${PYKYUREN_TIMESTAMP}
    COMMAND ${CMAKE_COMMAND} -E rm -f ${PYKYUREN_LIB}
    COMMAND ${PYTHON} ${PYKYUREN_SETUP_PY} build --build-lib=.
    COMMAND ${CMAKE_COMMAND} -E remove_directory ${BLENDER_USER_SCRIPT_KYUREN_DIR}
    COMMAND ${CMAKE_COMMAND} -E make_directory ${BLENDER_USER_SCRIPT_KYUREN_DIR}
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/addon/ ${BLENDER_USER_SCRIPT_KYUREN_DIR}
    COMMAND ${CMAKE_COMMAND} -E touch ${PYKYUREN_TIMESTAMP}
    COMMAND ${CMAKE_COMMAND} -E copy ${PYKYUREN_LIB} ${BLENDER_USER_SCRIPT_KYUREN_DIR}
    DEPENDS ${PYKYUREN_DEPS})

add_custom_target(PYKYUREN ALL DEPENDS ${PYKYUREN_TIMESTAMP})

